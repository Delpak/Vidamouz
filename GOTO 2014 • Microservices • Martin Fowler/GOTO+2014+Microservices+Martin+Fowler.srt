1
00:00:11,720 --> 00:00:17,440
so microservices have been talked about a lot over the last year

2
00:00:17,850 --> 00:00:22,720
 also I see a huge amount of stuff on Twitter and the like talking about this topic

3
00:00:23,230 --> 00:00:26,976
 it's something I've been hearing about for a good bit for a little bit longer

4
00:00:27,120 --> 00:00:31,888
last two or three years various of my colleagues and friends have been talking about micro services

5
00:00:32,320 --> 00:00:38,416
and for me the struggle was to try and figure out well what exactly are they

6
00:00:38,910 --> 00:00:42,928
what what do people really mean when they talk about microservices

7
00:00:42,970 --> 00:00:46,608
and also you know when should we consider using this technique 

8
00:00:46,650 --> 00:00:51,744
is it new or not. Do we use it? do we not use it? And what not it is in the first place

9
00:00:52,128 --> 00:00:54,912
I mean the basic idea is fairly straightforward

10
00:00:55,776 --> 00:01:01,136
 you contrast it with what's considered to be a traditional monolithic application

11
00:01:01,480 --> 00:01:05,968
A monolithic application means you've got various capabilities,

12
00:01:06,030 --> 00:01:08,576
various things that you want to provide

13
00:01:08,704 --> 00:01:11,320
and you put them all in the same application

14
00:01:11,376 --> 00:01:13,472
typically running in a single process

15
00:01:13,648 --> 00:01:16,560
 and you think of it as one thing

16
00:01:17,184 --> 00:01:18,704
the microservice approach

17
00:01:19,000 --> 00:01:24,816
 and its crew disciplines is trying to take each of these capabilities and put them into separate processes

18
00:01:25,152 --> 00:01:30,448
 and instead of having one process have this network of communicating processes 

19
00:01:30,680 --> 00:01:34,304
a lot of people like to use the example of of the UNIX command line

20
00:01:34,320 --> 00:01:40,192
where if you want to get a list of all the files in your directory sorted you might use two or three different programs

21
00:01:40,280 --> 00:01:42,080
put together in a pipeline to do so

22
00:01:43,392 --> 00:01:46,208
 it also has a consequence for distribution

23
00:01:46,380 --> 00:01:54,176
 if you've got a monolith, you scale by effectively cookie cutter in the monolith and putting it on multiple machines 

24
00:01:54,384 --> 00:01:58,384
 while we're microservices you've got more of a flexible approach because you can

25
00:01:58,544 --> 00:02:00,784
put different services on different machines 

26
00:02:00,830 --> 00:02:05,424
 so that if some services get more load than others they can have more copies of  them made

27
00:02:05,792 --> 00:02:08,336
that's the kind of very crude overview

28
00:02:08,840 --> 00:02:13,056
but this is still a long way away from what I would really call the definition of it

29
00:02:13,104 --> 00:02:20,200
I mean how does this vary from everything I've been hearing people Yammer on about service-oriented architecture for the last 10 years

30
00:02:21,310 --> 00:02:26,944
 but the trouble is with something like a topic like micro  services it's very hard to come up with any kind of firm definition

31
00:02:27,240 --> 00:02:33,584
yes I mean I've filled the same thing with no sequel right I mean no sequel databases I mean what's the definition and no sequel

32
00:02:33,740 --> 00:02:40,880
And even further back I mean you know what is the definition we come up with really solid definition for functional programming

33
00:02:41,040 --> 00:02:45,088
well you know there are plenty out there you can choose from quite a wide range

34
00:02:45,728 --> 00:02:51,590
 what I think is better to think about is instead of thinking about a definition  to talk about common characteristics

35
00:02:51,590 --> 00:02:54,030
and what I mean by common characteristics is to say
 what I think is better to think about is instead of thinking about a definition  to talk about common characteristics

36
00:02:54,030 --> 00:02:54,784
and what I mean by common characteristics is to say

37
00:02:55,100 --> 00:02:58,720
if you burnt the talk to AB whole bunch of people doing micro-services

38
00:02:58,944 --> 00:03:01,936
and you look for the common things that most of them are doing

39
00:03:02,220 --> 00:03:09,180
 your test is that most people who say they're doing  micro-services should be doing most of  these things

40
00:03:09,180 --> 00:03:12,479
and I got together with one of my colleagues who's one of these guys has done a lot of work with microservices
 your test is that most people who say they're doing  micro-services should be doing most of  these things

41
00:03:12,479 --> 00:03:14,592
and I got together with one of my colleagues who's one of these guys has done a lot of work with microservices

42
00:03:14,688 --> 00:03:19,616
 and we came up with an article that we published earlier this year 

43
00:03:19,720 --> 00:03:27,488
 those of you at the back are going to struggle with all that everything on the slides that's at the bottom because of the way the things laid out but it's out there 

44
00:03:27,600 --> 00:03:32,624
and I'm just going to summarize some of these these were the nine common characteristics

45
00:03:32,752 --> 00:03:36,010
 that we came up with in writing that article.

46
00:03:36,240 --> 00:03:39,344
and I'm not going to talk through them all because I don't have enough time

47
00:03:39,610 --> 00:03:42,864
but I will highlight some that I think are particularly interesting

48
00:03:44,272 --> 00:03:48,656
so the first thing is this notion of componentization via services 

49
00:03:49,040 --> 00:03:53,264
now the idea software should be broken up into components

50
00:03:53,340 --> 00:03:58,976
has been around again forever we always a lot of people have  talked about component based software

51
00:03:59,024 --> 00:04:02,430
and how it would be good to have  components that you can work with

52
00:04:02,430 --> 00:04:04,560
but often the term component of course has had a lot of problems in terms of definition as well
and how it would be good to have  components that you can work with

53
00:04:04,560 --> 00:04:07,280
but often the term component of course has had a lot of problems in terms of definition as well

54
00:04:07,610 --> 00:04:12,176
I remember a one point object being substituted for components and then

55
00:04:12,256 --> 00:04:16,624
 components came back to objects again and it all got very confusing

56
00:04:16,624 --> 00:04:19,469
what I focus on for a definition of component really comes from Ralph Johnson
 components came back to objects again and it all got very confusing

57
00:04:19,469 --> 00:04:21,136
what I focus on for a definition of component really comes from Ralph Johnson

58
00:04:21,232 --> 00:04:23,184
he said that what we're trying to do

59
00:04:23,280 --> 00:04:27,360
is we're trying to build software the way people would assemble stereo components

60
00:04:27,560 --> 00:04:31,776
you know you have an amplifier you have speakers you have a  CD play have a tape player

61
00:04:31,824 --> 00:04:35,070
 you can replace any of these items independently 

62
00:04:35,904 --> 00:04:37,744
that's a crucial thing

63
00:04:37,824 --> 00:04:41,312
 and indeed you can upgrade any of these items independently

64
00:04:41,520 --> 00:04:46,416
so if I want to get an  improved amplifier I don't have to  change everything else

65
00:04:46,416 --> 00:04:48,688
 that's a goal of what we're aiming for
so if I want to get an  improved amplifier I don't have to  change everything else

66
00:04:48,688 --> 00:04:48,990
so if I want to get an  improved amplifier I don't have to  change everything else

67
00:04:48,990 --> 00:04:50,038
 a component is something that's independently replaceable independently upgradable
so if I want to get an  improved amplifier I don't have to  change everything else

68
00:04:50,038 --> 00:04:53,744
 a component is something that's independently replaceable independently upgradable

69
00:04:55,648 --> 00:04:57,584
so in terms of software

70
00:04:58,032 --> 00:05:01,072
 and we see components to becoming two forms

71
00:05:01,400 --> 00:05:07,024
we obtain libraries that we use from third parties and we make them part of our process 

72
00:05:07,640 --> 00:05:11,568
and to some extent we have then the choice of when do we want to upgrade that

73
00:05:11,600 --> 00:05:15,136
 do we want to get a new version of   our XML processing library

74
00:05:15,136 --> 00:05:16,649
or do we stick with the one that we've currently got
 do we want to get a new version of   our XML processing library

75
00:05:16,649 --> 00:05:17,216
or do we stick with the one that we've currently got

76
00:05:17,240 --> 00:05:21,456
and hopefully the upgrade isn't   going to affect the rest of our  application too much

77
00:05:21,584 --> 00:05:24,160
 depending upon how the dependencies are all laid out

78
00:05:25,000 --> 00:05:30,144
A service is a different kind of component where it's running in its own process 

79
00:05:30,416 --> 00:05:32,490
 and while with a library we talk using 

80
00:05:32,490 --> 00:05:33,520
the language communication facilities 
 and while with a library we talk using 

81
00:05:33,520 --> 00:05:34,889
the language communication facilities 

82
00:05:34,889 --> 00:05:36,209
that we have built into whatever 
the language communication facilities 

83
00:05:36,209 --> 00:05:36,210
language we're using with a service 
that we have built into whatever 
the language communication facilities 

84
00:05:36,210 --> 00:05:38,129
that we have built into whatever 
language we're using with a service 

85
00:05:38,129 --> 00:05:39,508
we're typically using inter process 
language we're using with a service 

86
00:05:39,509 --> 00:05:42,899
communication facilities such as web 
we're typically using inter process 

87
00:05:42,899 --> 00:05:44,908
service calls or messaging or something
communication facilities such as web 

88
00:05:44,908 --> 00:05:48,179
of that kind and the services give us 
service calls or messaging or something

89
00:05:48,179 --> 00:05:48,180
of that kind and the services give us 

90
00:05:48,180 --> 00:05:49,949
some useful advantages even when it 
of that kind and the services give us 

91
00:05:49,949 --> 00:05:51,478
tends to replace ability and upgrade 
some useful advantages even when it 

92
00:05:51,478 --> 00:05:54,449
 ability if I've got a monolith with 
tends to replace ability and upgrade 

93
00:05:54,449 --> 00:05:57,839
 components that are libraries and I've 
 ability if I've got a monolith with 

94
00:05:57,839 --> 00:05:59,669
got you know somebody brings out a new
 components that are libraries and I've 

95
00:05:59,668 --> 00:06:01,168
version of a component that would be 
got you know somebody brings out a new

96
00:06:01,168 --> 00:06:03,359
really nice but it only works on Java 8 
version of a component that would be 

97
00:06:03,359 --> 00:06:03,360
really nice but it only works on Java 8 

98
00:06:03,360 --> 00:06:05,758
and I've got another component in my
really nice but it only works on Java 8 

99
00:06:05,759 --> 00:06:08,009
monolith that doesn't work with Java 8 
and I've got another component in my

100
00:06:08,009 --> 00:06:10,139
and can only work with Java 7 what do I 
monolith that doesn't work with Java 8 

101
00:06:10,139 --> 00:06:13,348
do I'm stuck but on the other hand with 
and can only work with Java 7 what do I 

102
00:06:13,348 --> 00:06:14,908
if they were separate services they 
do I'm stuck but on the other hand with 

103
00:06:14,908 --> 00:06:16,069
 would be running in completely different 
if they were separate services they 

104
00:06:16,069 --> 00:06:18,329
runtimes and they could operate they 
 would be running in completely different 

105
00:06:18,329 --> 00:06:20,939
 could be upgraded more independently now 
runtimes and they could operate they 

106
00:06:20,939 --> 00:06:22,800
there's a cost of course with that but 
 could be upgraded more independently now 

107
00:06:22,800 --> 00:06:24,538
that's part of the notion of how it ties 
there's a cost of course with that but 

108
00:06:24,538 --> 00:06:29,399
into the independent upgrade ability so 
that's part of the notion of how it ties 

109
00:06:29,399 --> 00:06:29,400
for the next one 
into the independent upgrade ability so 
that's part of the notion of how it ties 

110
00:06:29,400 --> 00:06:31,360
into the independent upgrade ability so 
for the next one 

111
00:06:31,360 --> 00:06:34,310
organization in around business 
for the next one 

112
00:06:34,310 --> 00:06:36,139
capabilities is another important theme 
organization in around business 

113
00:06:36,139 --> 00:06:37,879
in the micro services view of the world 
capabilities is another important theme 

114
00:06:37,879 --> 00:06:41,300
 so a lot of lot even development 
in the micro services view of the world 

115
00:06:41,300 --> 00:06:43,908
 organizations organize themselves around 
 so a lot of lot even development 

116
00:06:43,908 --> 00:06:46,490
 technology I mean you'll see this in a 
 organizations organize themselves around 

117
00:06:46,490 --> 00:06:47,930
lot of big companies I'll have their D 
 technology I mean you'll see this in a 

118
00:06:47,930 --> 00:06:49,550
 bas and their database group that might 
lot of big companies I'll have their D 

119
00:06:49,550 --> 00:06:50,718
 have a completely different group of 
 bas and their database group that might 

120
00:06:50,718 --> 00:06:53,149
 people on the UI it's focused around 
 have a completely different group of 

121
00:06:53,149 --> 00:06:53,150
 technology the key thing with the micro 
 people on the UI it's focused around 
 have a completely different group of 

122
00:06:53,150 --> 00:06:56,028
 people on the UI it's focused around 
 technology the key thing with the micro 

123
00:06:56,028 --> 00:06:57,498
 services view of the world is that we 
 technology the key thing with the micro 

124
00:06:57,499 --> 00:06:59,959
should instead organize around business 
 services view of the world is that we 

125
00:06:59,959 --> 00:07:03,259
 capabilities and that each team should 
should instead organize around business 

126
00:07:03,259 --> 00:07:06,079
 have some elements right the way through 
 capabilities and that each team should 

127
00:07:06,079 --> 00:07:09,649
 and ideally focusing directly on the end 
 have some elements right the way through 

128
00:07:09,649 --> 00:07:09,650
users themselves there's an interesting 
 and ideally focusing directly on the end 
 have some elements right the way through 

129
00:07:09,650 --> 00:07:12,318
 and ideally focusing directly on the end 
users themselves there's an interesting 

130
00:07:12,319 --> 00:07:14,258
example of this from Amazon which is a 
users themselves there's an interesting 

131
00:07:14,259 --> 00:07:16,610
common certainly inspiration for the 
example of this from Amazon which is a 

132
00:07:16,610 --> 00:07:18,919
micro services community where when they 
common certainly inspiration for the 

133
00:07:18,918 --> 00:07:21,139
divided everybody knows Amazon divided
micro services community where when they 

134
00:07:21,139 --> 00:07:23,299
 themselves up into two pizza teams and 
divided everybody knows Amazon divided

135
00:07:23,299 --> 00:07:23,300
 themselves up into two pizza teams and 

136
00:07:23,300 --> 00:07:25,250
that's talked about a lot but what's 
 themselves up into two pizza teams and 

137
00:07:25,250 --> 00:07:26,870
talked about a lot less often is the 
that's talked about a lot but what's 

138
00:07:26,870 --> 00:07:29,120
fact that each team was responsible for 
talked about a lot less often is the 

139
00:07:29,120 --> 00:07:30,889
 the communication right way through to 
fact that each team was responsible for 

140
00:07:30,889 --> 00:07:33,620
the end user experience and the idea 
 the communication right way through to 

141
00:07:33,620 --> 00:07:35,209
 that that should connect right the way 
the end user experience and the idea 

142
00:07:35,209 --> 00:07:35,210
through to the people at the end and 
 that that should connect right the way 
the end user experience and the idea 

143
00:07:35,210 --> 00:07:37,310
 that that should connect right the way 
through to the people at the end and 

144
00:07:37,310 --> 00:07:39,528
they should be judged on how does this 
through to the people at the end and 

145
00:07:39,528 --> 00:07:42,620
affect business outcomes right the way 
they should be judged on how does this 

146
00:07:42,620 --> 00:07:44,478
 through is a very important part of that 
affect business outcomes right the way 

147
00:07:44,478 --> 00:07:46,968
thinking so we have this notion of
 through is a very important part of that 

148
00:07:46,968 --> 00:07:49,519
divide yourself up around some kind of 
thinking so we have this notion of

149
00:07:49,519 --> 00:07:52,009
 business organization and make that as 
divide yourself up around some kind of 

150
00:07:52,009 --> 00:07:59,000
 full stack as possible perhaps when it 
 business organization and make that as 

151
00:07:59,000 --> 00:08:00,919
comes to comparison to what a lot of
 full stack as possible perhaps when it 

152
00:08:00,918 --> 00:08:02,569
 people have come across in terms of 
comes to comparison to what a lot of

153
00:08:02,569 --> 00:08:04,609
services one of the biggest shifts is 
 people have come across in terms of 

154
00:08:04,609 --> 00:08:04,610
services one of the biggest shifts is 

155
00:08:04,610 --> 00:08:08,120
this shift about let's have smart
services one of the biggest shifts is 

156
00:08:08,120 --> 00:08:11,658
 endpoints and dumb pipes when a lot of 
this shift about let's have smart

157
00:08:11,658 --> 00:08:13,189
 people talk about service-oriented 
 endpoints and dumb pipes when a lot of 

158
00:08:13,189 --> 00:08:16,038
 architecture they talk about the idea of 
 people talk about service-oriented 

159
00:08:16,038 --> 00:08:17,899
 let's get some powerful piece of 
 architecture they talk about the idea of 

160
00:08:17,899 --> 00:08:20,028
middleware that will automatically do 
 let's get some powerful piece of 

161
00:08:20,028 --> 00:08:21,468
all sorts of stuff it'll route messages 
middleware that will automatically do 

162
00:08:21,468 --> 00:08:23,810
 it will apply business rules it does all 
all sorts of stuff it'll route messages 

163
00:08:23,810 --> 00:08:26,149
 sorts of things this of course is the 
 it will apply business rules it does all 

164
00:08:26,149 --> 00:08:30,019
the ESB the Enterprise Service bus or is 
 sorts of things this of course is the 

165
00:08:30,019 --> 00:08:32,059
it more correctly known the egregious 
the ESB the Enterprise Service bus or is 

166
00:08:32,059 --> 00:08:34,929
spaghetti box
it more correctly known the egregious 

167
00:08:36,450 --> 00:08:38,729
the micro-service community very much 

168
00:08:38,729 --> 00:08:41,549
regret reject this notion and says the
the micro-service community very much 

169
00:08:41,549 --> 00:08:41,550
smarts instead should move to the 
regret reject this notion and says the
the micro-service community very much 

170
00:08:41,550 --> 00:08:43,919
regret reject this notion and says the
smarts instead should move to the 

171
00:08:43,918 --> 00:08:46,859
 endpoints themselves what we want is 
smarts instead should move to the 

172
00:08:46,859 --> 00:08:46,860
 endpoints themselves what we want is 

173
00:08:46,860 --> 00:08:49,500
everything to connect together and to be 
 endpoints themselves what we want is 

174
00:08:49,500 --> 00:08:51,240
able to easily route messages or 
everything to connect together and to be 

175
00:08:51,240 --> 00:08:52,980
communications between them but it 
able to easily route messages or 

176
00:08:52,980 --> 00:08:54,870
 should be up to the endpoints where all 
communications between them but it 

177
00:08:54,870 --> 00:08:57,329
that smartness goes any business logic
 should be up to the endpoints where all 

178
00:08:57,328 --> 00:09:00,149
 any routing stuff all of this should be 
that smartness goes any business logic

179
00:09:00,149 --> 00:09:01,799
based on the endpoints just give us a 
 any routing stuff all of this should be 

180
00:09:01,799 --> 00:09:03,929
good efficient piping mechanism and the
based on the endpoints just give us a 

181
00:09:03,929 --> 00:09:05,609
inspiration in many ways is of course 
good efficient piping mechanism and the

182
00:09:05,609 --> 00:09:05,610
inspiration in many ways is of course 

183
00:09:05,610 --> 00:09:07,708
the Internet itself which works very 
inspiration in many ways is of course 

184
00:09:07,708 --> 00:09:09,449
well because of the fact that it needs a 
the Internet itself which works very 

185
00:09:09,448 --> 00:09:11,879
relatively dumb set of pipes and puts 
well because of the fact that it needs a 

186
00:09:11,879 --> 00:09:15,828
all the intelligence onto the endpoints 
relatively dumb set of pipes and puts 

187
00:09:19,669 --> 00:09:22,820
another thing that also brings out this 

188
00:09:22,820 --> 00:09:25,889
variation to a lot of service stuff is 
another thing that also brings out this 

189
00:09:25,889 --> 00:09:28,519
the notion of decentralization
variation to a lot of service stuff is 

190
00:09:28,519 --> 00:09:30,809
decentralization in terms of the overall 
the notion of decentralization

191
00:09:30,809 --> 00:09:30,810
way in which a service landscape is 
decentralization in terms of the overall 
the notion of decentralization

192
00:09:30,810 --> 00:09:32,820
decentralization in terms of the overall 
way in which a service landscape is 

193
00:09:32,820 --> 00:09:34,698
governed and in particularly 
way in which a service landscape is 

194
00:09:34,698 --> 00:09:36,629
decentralization in terms of data
governed and in particularly 

195
00:09:36,629 --> 00:09:40,019
management so again if we think of the 
decentralization in terms of data

196
00:09:40,019 --> 00:09:42,328
the monolithic world we think of the 
management so again if we think of the 

197
00:09:42,328 --> 00:09:44,250
fact that generally all of the data is
the monolithic world we think of the 

198
00:09:44,250 --> 00:09:46,169
sitting in one honking big relational 
fact that generally all of the data is

199
00:09:46,169 --> 00:09:48,870
database all right and it's often can be 
sitting in one honking big relational 

200
00:09:48,870 --> 00:09:50,578
 to write across a company you know our 
database all right and it's often can be 

201
00:09:50,578 --> 00:09:52,110
 company's standard is Oracle or our 
 to write across a company you know our 

202
00:09:52,110 --> 00:09:54,239
 company's standard is db2 everything 
 company's standard is Oracle or our 

203
00:09:54,239 --> 00:09:54,240
 company's standard is db2 everything 

204
00:09:54,240 --> 00:09:56,730
goes in the same place and even a lot of 
 company's standard is db2 everything 

205
00:09:56,730 --> 00:09:58,528
 service-oriented architectures it's 
goes in the same place and even a lot of 

206
00:09:58,528 --> 00:10:00,720
really a lot about multiple services or 
 service-oriented architectures it's 

207
00:10:00,720 --> 00:10:03,480
pulling data in and out of one logically 
really a lot about multiple services or 

208
00:10:03,480 --> 00:10:06,839
 large database the micro service appoint 
pulling data in and out of one logically 

209
00:10:06,839 --> 00:10:09,659
point of view is to say now every 
 large database the micro service appoint 

210
00:10:09,659 --> 00:10:11,429
service should be responsible for its 
point of view is to say now every 

211
00:10:11,429 --> 00:10:11,430
own data and its own persistence again 
service should be responsible for its 
point of view is to say now every 

212
00:10:11,430 --> 00:10:14,578
service should be responsible for its 
own data and its own persistence again 

213
00:10:14,578 --> 00:10:16,379
this is another thing that is inspired 
own data and its own persistence again 

214
00:10:16,379 --> 00:10:18,599
 by the Amazon experience Amazon made 
this is another thing that is inspired 

215
00:10:18,599 --> 00:10:18,600
 by the Amazon experience Amazon made 

216
00:10:18,600 --> 00:10:20,159
that one of their rules when they 
 by the Amazon experience Amazon made 

217
00:10:20,159 --> 00:10:21,600
 shifted to a service-oriented approach 
that one of their rules when they 

218
00:10:21,600 --> 00:10:24,328
and said you may never talk to another 
 shifted to a service-oriented approach 

219
00:10:24,328 --> 00:10:26,940
services data store you can only talk to 
and said you may never talk to another 

220
00:10:26,940 --> 00:10:29,068
 another service through its API and 
services data store you can only talk to 

221
00:10:29,068 --> 00:10:31,440
that's the rule that the micro service 
 another service through its API and 

222
00:10:31,440 --> 00:10:35,578
people push as well now this is a couple 
that's the rule that the micro service 

223
00:10:35,578 --> 00:10:38,100
 advantages first it removes this 
people push as well now this is a couple 

224
00:10:38,100 --> 00:10:40,169
horrible mess of integrating through a 
 advantages first it removes this 

225
00:10:40,169 --> 00:10:43,019
database which causes no end of problems 
horrible mess of integrating through a 

226
00:10:43,019 --> 00:10:46,289
 in enterprises all over the place the 
database which causes no end of problems 

227
00:10:46,289 --> 00:10:47,730
second thing it does it frees up 
 in enterprises all over the place the 

228
00:10:47,730 --> 00:10:49,649
individual services to use a datastore 
second thing it does it frees up 

229
00:10:49,649 --> 00:10:50,220
 that make 
individual services to use a datastore 

230
00:10:50,220 --> 00:10:53,610
sense to them some services a relational 
 that make 

231
00:10:53,610 --> 00:10:54,929
database will make sense
sense to them some services a relational 

232
00:10:54,929 --> 00:10:54,930
others would want to use one of these
database will make sense
sense to them some services a relational 

233
00:10:54,930 --> 00:10:56,700
database will make sense
others would want to use one of these

234
00:10:56,700 --> 00:10:59,549
hot new no sequel fancy things and in 
others would want to use one of these

235
00:10:59,549 --> 00:11:01,830
which case they use it for that but the 
hot new no sequel fancy things and in 

236
00:11:01,830 --> 00:11:04,139
idea is yours choice of data persistence 
which case they use it for that but the 

237
00:11:04,139 --> 00:11:06,389
 should be entirely up to the individual 
idea is yours choice of data persistence 

238
00:11:06,389 --> 00:11:10,679
service themselves and that's part of 
 should be entirely up to the individual 

239
00:11:10,679 --> 00:11:12,240
 this general notion as I said of 
service themselves and that's part of 

240
00:11:12,240 --> 00:11:14,549
decentralization it also goes to the 
 this general notion as I said of 

241
00:11:14,549 --> 00:11:16,409
point of things like languages and tools
decentralization it also goes to the 

242
00:11:16,409 --> 00:11:19,079
 should again be individually chosen by 
point of things like languages and tools

243
00:11:19,079 --> 00:11:19,080
 should again be individually chosen by 

244
00:11:19,080 --> 00:11:23,549
different service groups to make all of
 should again be individually chosen by 

245
00:11:23,549 --> 00:11:25,620
this work it's really important to have 
different service groups to make all of

246
00:11:25,620 --> 00:11:29,429
infrastructure automation so a lot of 
this work it's really important to have 

247
00:11:29,429 --> 00:11:32,419
things such as continuous delivery 
infrastructure automation so a lot of 

248
00:11:32,419 --> 00:11:34,739
techniques like Bluegreen deployment 
things such as continuous delivery 

249
00:11:34,739 --> 00:11:34,740
techniques like Bluegreen deployment 

250
00:11:34,740 --> 00:11:37,199
that allow you to put stuff to live with 
techniques like Bluegreen deployment 

251
00:11:37,199 --> 00:11:37,200
that allow you to put stuff to live with 

252
00:11:37,200 --> 00:11:40,320
zero downtime these kinds of things are 
that allow you to put stuff to live with 

253
00:11:40,320 --> 00:11:42,720
mandatory in too in order to get this 
zero downtime these kinds of things are 

254
00:11:42,720 --> 00:11:44,549
 kind of stuff to work because you're 
mandatory in too in order to get this 

255
00:11:44,549 --> 00:11:44,550
 talking about building what would be one 
 kind of stuff to work because you're 
mandatory in too in order to get this 

256
00:11:44,550 --> 00:11:46,200
 kind of stuff to work because you're 
 talking about building what would be one 

257
00:11:46,200 --> 00:11:48,659
application as a dozen or two dozen 
 talking about building what would be one 

258
00:11:48,659 --> 00:11:51,090
services so it's very important you have 
application as a dozen or two dozen 

259
00:11:51,090 --> 00:11:52,709
 a very automated way of getting these 
services so it's very important you have 

260
00:11:52,709 --> 00:11:52,710
 a very automated way of getting these 

261
00:11:52,710 --> 00:11:54,899
 things going you also want to be able to 
 a very automated way of getting these 

262
00:11:54,899 --> 00:11:56,789
get new boxes and spin them up rapidly 
 things going you also want to be able to 

263
00:11:56,789 --> 00:11:56,790
 it also puts a lot of emphasis on 
get new boxes and spin them up rapidly 
 things going you also want to be able to 

264
00:11:56,790 --> 00:11:59,189
get new boxes and spin them up rapidly 
 it also puts a lot of emphasis on 

265
00:11:59,189 --> 00:11:59,190
 it also puts a lot of emphasis on 

266
00:11:59,190 --> 00:12:02,159
monitoring as well you've got to have 
 it also puts a lot of emphasis on 

267
00:12:02,159 --> 00:12:04,409
good monitoring so that when things go 
monitoring as well you've got to have 

268
00:12:04,409 --> 00:12:04,410
wrong you can easily spot the fact that 
good monitoring so that when things go 
monitoring as well you've got to have 

269
00:12:04,410 --> 00:12:06,299
good monitoring so that when things go 
wrong you can easily spot the fact that 

270
00:12:06,299 --> 00:12:08,009
something's gone wrong and you can use 
wrong you can easily spot the fact that 

271
00:12:08,009 --> 00:12:09,509
the monitoring tools to help you debug 
something's gone wrong and you can use 

272
00:12:09,509 --> 00:12:12,480
it and that of course then leads into 
the monitoring tools to help you debug 

273
00:12:12,480 --> 00:12:14,309
 the notion that you have this explicit 
it and that of course then leads into 

274
00:12:14,309 --> 00:12:16,620
 design for failure if you're going to 
 the notion that you have this explicit 

275
00:12:16,620 --> 00:12:18,719
have remote services they're going to
 design for failure if you're going to 

276
00:12:18,719 --> 00:12:18,720
have remote services they're going to

277
00:12:18,720 --> 00:12:20,970
fail particularly as you distribute them
have remote services they're going to

278
00:12:20,970 --> 00:12:23,429
 across multiple nodes so this is another 
fail particularly as you distribute them

279
00:12:23,429 --> 00:12:23,430
part of the reason why monitoring is so 
 across multiple nodes so this is another 
fail particularly as you distribute them

280
00:12:23,430 --> 00:12:25,200
 across multiple nodes so this is another 
part of the reason why monitoring is so 

281
00:12:25,200 --> 00:12:27,299
important and of course it it's most 
part of the reason why monitoring is so 

282
00:12:27,299 --> 00:12:30,840
famous level you have things like the 
important and of course it it's most 

283
00:12:30,840 --> 00:12:33,179
chaos monkey Netflix is one of the most 
famous level you have things like the 

284
00:12:33,179 --> 00:12:36,110
 well known MA micro service 
chaos monkey Netflix is one of the most 

285
00:12:36,110 --> 00:12:39,299
architectures and they built a tool that
 well known MA micro service 

286
00:12:39,299 --> 00:12:42,649
 goes around randomly destroying nodes 
architectures and they built a tool that

287
00:12:42,649 --> 00:12:46,379
 and they use that in order to detect how 
 goes around randomly destroying nodes 

288
00:12:46,379 --> 00:12:48,539
resilient their overall network is I
 and they use that in order to detect how 

289
00:12:48,539 --> 00:12:50,100
mean I don't run it all the time they 
resilient their overall network is I

290
00:12:50,100 --> 00:12:51,509
run it during office hours when there's 
mean I don't run it all the time they 

291
00:12:51,509 --> 00:12:53,639
somebody there to fix things up but the 
run it during office hours when there's 

292
00:12:53,639 --> 00:12:54,899
fact that you've got a tool that 
somebody there to fix things up but the 

293
00:12:54,899 --> 00:12:57,569
deliberately causes failure in order to 
fact that you've got a tool that 

294
00:12:57,569 --> 00:12:57,570
deliberately causes failure in order to 

295
00:12:57,570 --> 00:12:59,669
help make sure you're resilient I think 
deliberately causes failure in order to 

296
00:12:59,669 --> 00:13:02,820
it encapsulate svelt the attitude that 
help make sure you're resilient I think 

297
00:13:02,820 --> 00:13:04,039
the micro service people have 
it encapsulate svelt the attitude that 

298
00:13:04,039 --> 00:13:06,079
and of course this is essential in any 
the micro service people have 

299
00:13:06,078 --> 00:13:08,028
kind of distributed system you have to 
and of course this is essential in any 

300
00:13:08,028 --> 00:13:12,258
assume things are going to break so that 
kind of distributed system you have to 

301
00:13:12,259 --> 00:13:14,088
was our set of common characteristics
assume things are going to break so that 

302
00:13:14,089 --> 00:13:16,699
 and I hope gives you a bit of a flavor 
was our set of common characteristics

303
00:13:16,698 --> 00:13:18,529
 for the kinds of things that people talk 
 and I hope gives you a bit of a flavor 

304
00:13:18,528 --> 00:13:20,689
 about but it still raises a number of 
 for the kinds of things that people talk 

305
00:13:20,689 --> 00:13:20,690
 about but it still raises a number of 

306
00:13:20,690 --> 00:13:23,269
questions of which one of the biggest 
 about but it still raises a number of 

307
00:13:23,269 --> 00:13:24,980
things is is this really 
questions of which one of the biggest 

308
00:13:24,980 --> 00:13:26,690
service-oriented architecture is this 
things is is this really 

309
00:13:26,690 --> 00:13:28,100
just the same kind of stuff that we've 
service-oriented architecture is this 

310
00:13:28,100 --> 00:13:30,079
 been hearing about for a long time in 
just the same kind of stuff that we've 

311
00:13:30,078 --> 00:13:33,470
the context of SOA but in order to 
 been hearing about for a long time in 

312
00:13:33,470 --> 00:13:35,000
answer that question you have to say to 
the context of SOA but in order to 

313
00:13:35,000 --> 00:13:37,009
yourself well what is SLA in the first 
answer that question you have to say to 

314
00:13:37,009 --> 00:13:39,769
place and that is really I think at the 
yourself well what is SLA in the first 

315
00:13:39,769 --> 00:13:42,049
heart of the problem because I've heard 
place and that is really I think at the 

316
00:13:42,049 --> 00:13:42,050
SLA defined in many different ways in 
heart of the problem because I've heard 
place and that is really I think at the 

317
00:13:42,050 --> 00:13:44,509
heart of the problem because I've heard 
SLA defined in many different ways in 

318
00:13:44,509 --> 00:13:46,879
many different incompatible ways by
SLA defined in many different ways in 

319
00:13:46,879 --> 00:13:50,419
different people for some people SLA is 
many different incompatible ways by

320
00:13:50,419 --> 00:13:52,039
exactly what we've been talking about in 
different people for some people SLA is 

321
00:13:52,039 --> 00:13:53,809
the micro service world and that's why I 
exactly what we've been talking about in 

322
00:13:53,809 --> 00:13:55,578
met a number of people in the SOA 
the micro service world and that's why I 

323
00:13:55,578 --> 00:13:57,708
community a really ticked off at the 
met a number of people in the SOA 

324
00:13:57,708 --> 00:14:00,019
micro service people because their 
community a really ticked off at the 

325
00:14:00,019 --> 00:14:01,969
 attitude is well we've been doing all of 
micro service people because their 

326
00:14:01,969 --> 00:14:01,970
 attitude is well we've been doing all of 

327
00:14:01,970 --> 00:14:03,799
 this and calling it SOA for years why do 
 attitude is well we've been doing all of 

328
00:14:03,799 --> 00:14:05,449
you invent this new term and bring it
 this and calling it SOA for years why do 

329
00:14:05,448 --> 00:14:07,639
along what what is are you just calling 
you invent this new term and bring it

330
00:14:07,639 --> 00:14:09,588
words because everybody knows of course
along what what is are you just calling 

331
00:14:09,589 --> 00:14:11,870
 we become incredibly rich by coining 
words because everybody knows of course

332
00:14:11,870 --> 00:14:17,389
terminology I wish but of course SOA 
 we become incredibly rich by coining 

333
00:14:17,389 --> 00:14:18,889
means different things to different 
terminology I wish but of course SOA 

334
00:14:18,889 --> 00:14:21,139
 people to many people in the micro 
means different things to different 

335
00:14:21,139 --> 00:14:23,269
services community they've been around 
 people to many people in the micro 

336
00:14:23,269 --> 00:14:26,389
big enterprises and to them SOA means 
services community they've been around 

337
00:14:26,389 --> 00:14:27,948
 the enterprise service bus 
big enterprises and to them SOA means 

338
00:14:27,948 --> 00:14:30,799
 it means Committees of people who are 
 the enterprise service bus 

339
00:14:30,799 --> 00:14:33,229
there to lay down standards the health 
 it means Committees of people who are 

340
00:14:33,229 --> 00:14:33,230
there to lay down standards the health 

341
00:14:33,230 --> 00:14:34,578
 services supposed to connect to each 
there to lay down standards the health 

342
00:14:34,578 --> 00:14:37,429
 other it's a very different world indeed 
 services supposed to connect to each 

343
00:14:37,429 --> 00:14:37,430
 so the way I tend to think of it is 
 other it's a very different world indeed 
 services supposed to connect to each 

344
00:14:37,430 --> 00:14:39,708
 other it's a very different world indeed 
 so the way I tend to think of it is 

345
00:14:39,708 --> 00:14:42,588
saying well SOA is this very broad term
 so the way I tend to think of it is 

346
00:14:42,589 --> 00:14:45,379
and microservices is a subset of its 
saying well SOA is this very broad term

347
00:14:45,379 --> 00:14:48,379
usage and the value of the term micro 
and microservices is a subset of its 

348
00:14:48,379 --> 00:14:48,380
 services is it allows to put a label on 
usage and the value of the term micro 
and microservices is a subset of its 

349
00:14:48,380 --> 00:14:51,259
usage and the value of the term micro 
 services is it allows to put a label on 

350
00:14:51,259 --> 00:14:54,759
 a useful subset of the SOA terminology 
 services is it allows to put a label on 

351
00:14:54,759 --> 00:14:58,578
in my view the SOA term is too broad I 
 a useful subset of the SOA terminology 

352
00:14:58,578 --> 00:15:00,259
mean it means so many different things 
in my view the SOA term is too broad I 

353
00:15:00,259 --> 00:15:03,258
it's practically meaningless but the 
mean it means so many different things 

354
00:15:03,259 --> 00:15:05,480
value of micro services is it carves out 
it's practically meaningless but the 

355
00:15:05,480 --> 00:15:08,568
a cut and consistent space within that 
value of micro services is it carves out 

356
00:15:08,568 --> 00:15:11,509
but he is perfectly fair to say that the 
a cut and consistent space within that 

357
00:15:11,509 --> 00:15:13,399
micro service approach has been done by 
but he is perfectly fair to say that the 

358
00:15:13,399 --> 00:15:15,559
 people under the name of SOA for at 
micro service approach has been done by 

359
00:15:15,559 --> 00:15:15,560
least a decade
 people under the name of SOA for at 
micro service approach has been done by 

360
00:15:15,560 --> 00:15:16,309
 people under the name of SOA for at 
least a decade

361
00:15:16,309 --> 00:15:17,299
if not more 
least a decade

362
00:15:17,299 --> 00:15:19,729
so it's not a new technique at all and 
if not more 

363
00:15:19,729 --> 00:15:19,730
so it's not a new technique at all and 

364
00:15:19,730 --> 00:15:22,159
it's perfectly reasonable that people 
so it's not a new technique at all and 

365
00:15:22,159 --> 00:15:24,019
are annoyed about it when they say Oh 
it's perfectly reasonable that people 

366
00:15:24,019 --> 00:15:26,120
 micro services are nothing new that's a 
are annoyed about it when they say Oh 

367
00:15:26,120 --> 00:15:31,370
perfectly reasonable response now one of 
 micro services are nothing new that's a 

368
00:15:31,370 --> 00:15:33,169
the problems with micro-services as a 
perfectly reasonable response now one of 

369
00:15:33,169 --> 00:15:36,529
term and I like to stress I didn't come 
the problems with micro-services as a 

370
00:15:36,529 --> 00:15:37,879
up with this term right I would have 
term and I like to stress I didn't come 

371
00:15:37,879 --> 00:15:40,850
 come up with a better term but one of 
up with this term right I would have 

372
00:15:40,850 --> 00:15:42,350
 the things about micro-services as a 
 come up with a better term but one of 

373
00:15:42,350 --> 00:15:44,539
term is that has this implication of 
 the things about micro-services as a 

374
00:15:44,539 --> 00:15:44,540
size and of course as soon as you say 
term is that has this implication of 
 the things about micro-services as a 

375
00:15:44,540 --> 00:15:47,330
term is that has this implication of 
size and of course as soon as you say 

376
00:15:47,330 --> 00:15:49,819
micro is that well how big is a micro 
size and of course as soon as you say 

377
00:15:49,819 --> 00:15:49,820
micro is that well how big is a micro 

378
00:15:49,820 --> 00:15:52,220
service and you actually talk to any of 
micro is that well how big is a micro 

379
00:15:52,220 --> 00:15:53,539
 these people in the micro service world 
service and you actually talk to any of 

380
00:15:53,539 --> 00:15:53,540
and they're always very reluctant to
 these people in the micro service world 
service and you actually talk to any of 

381
00:15:53,540 --> 00:15:54,919
 these people in the micro service world 
and they're always very reluctant to

382
00:15:54,919 --> 00:15:54,920
 answer this question they always say 
 these people in the micro service world 
and they're always very reluctant to

383
00:15:54,920 --> 00:15:56,959
and they're always very reluctant to
 answer this question they always say 

384
00:15:56,959 --> 00:15:56,960
 answer this question they always say 

385
00:15:56,960 --> 00:15:58,189
well you know it should be one 
 answer this question they always say 

386
00:15:58,189 --> 00:15:58,190
well you know it should be one 

387
00:15:58,190 --> 00:16:01,700
responsibility that's a kind of bogus 
well you know it should be one 

388
00:16:01,700 --> 00:16:03,950
thing to say right I can imagine payroll 
responsibility that's a kind of bogus 

389
00:16:03,950 --> 00:16:06,049
being one responsibility and I know 
thing to say right I can imagine payroll 

390
00:16:06,049 --> 00:16:06,050
that's a pretty big system right I mean 
being one responsibility and I know 
thing to say right I can imagine payroll 

391
00:16:06,050 --> 00:16:08,389
being one responsibility and I know 
that's a pretty big system right I mean 

392
00:16:08,389 --> 00:16:08,390
it's all size I mean it's very 
being one responsibility and I know 
that's a pretty big system right I mean 

393
00:16:08,390 --> 00:16:10,689
that's a pretty big system right I mean 
it's all size I mean it's very 

394
00:16:10,689 --> 00:16:10,690
it's all size I mean it's very 

395
00:16:10,690 --> 00:16:14,409
responsibilities are very flexible right 
it's all size I mean it's very 

396
00:16:14,409 --> 00:16:17,450
 james lewis has this statement he says 
responsibilities are very flexible right 

397
00:16:17,450 --> 00:16:19,039
 mirco services have got to be small 
 james lewis has this statement he says 

398
00:16:19,039 --> 00:16:21,980
 enough to fit in my head now James has 
 mirco services have got to be small 

399
00:16:21,980 --> 00:16:24,980
 config rate deal in his head as it turns 
 enough to fit in my head now James has 

400
00:16:24,980 --> 00:16:27,110
out but his point is of course the 
 config rate deal in his head as it turns 

401
00:16:27,110 --> 00:16:29,090
survey that if you've got a service it 
out but his point is of course the 

402
00:16:29,090 --> 00:16:30,799
should be understandable to a single 
survey that if you've got a service it 

403
00:16:30,799 --> 00:16:30,800
person that's his test for it but that's 
should be understandable to a single 
survey that if you've got a service it 

404
00:16:30,800 --> 00:16:33,230
should be understandable to a single 
person that's his test for it but that's 

405
00:16:33,230 --> 00:16:36,649
still a bit vague I started asking 
person that's his test for it but that's 

406
00:16:36,649 --> 00:16:38,480
 around people trying to get a sense of 
still a bit vague I started asking 

407
00:16:38,480 --> 00:16:41,299
size people were extremely reluctant in 
 around people trying to get a sense of 

408
00:16:41,299 --> 00:16:42,919
many ways but the way I was able to get 
size people were extremely reluctant in 

409
00:16:42,919 --> 00:16:42,920
some figure by saying well how many 
many ways but the way I was able to get 
size people were extremely reluctant in 

410
00:16:42,920 --> 00:16:44,750
many ways but the way I was able to get 
some figure by saying well how many 

411
00:16:44,750 --> 00:16:48,319
 people per service in your application 
some figure by saying well how many 

412
00:16:48,319 --> 00:16:48,320
 people per service in your application 

413
00:16:48,320 --> 00:16:51,230
 and I got a lot of different answers and 
 people per service in your application 

414
00:16:51,230 --> 00:16:53,360
 as you can see there's quite a spread 
 and I got a lot of different answers and 

415
00:16:53,360 --> 00:16:58,879
 here now 15 people 10 services for 
 as you can see there's quite a spread 

416
00:16:58,879 --> 00:17:01,549
people 200 services there's quite a 
 here now 15 people 10 services for 

417
00:17:01,549 --> 00:17:01,550
 range of different sizes it's certainly 
people 200 services there's quite a 
 here now 15 people 10 services for 

418
00:17:01,550 --> 00:17:05,119
people 200 services there's quite a 
 range of different sizes it's certainly 

419
00:17:05,119 --> 00:17:08,240
 true that pretty where everywhere I come 
 range of different sizes it's certainly 

420
00:17:08,240 --> 00:17:11,229
across the notion of the to pizza team 
 true that pretty where everywhere I come 

421
00:17:11,229 --> 00:17:11,230
across the notion of the to pizza team 

422
00:17:11,230 --> 00:17:15,140
from Amazon is fairly well regarded the 
across the notion of the to pizza team 

423
00:17:15,140 --> 00:17:16,700
sense that you should never have a team 
from Amazon is fairly well regarded the 

424
00:17:16,700 --> 00:17:18,440
 that's bigger than you could feed with 
sense that you should never have a team 

425
00:17:18,440 --> 00:17:20,750
two pizzas I should say of course this 
 that's bigger than you could feed with 

426
00:17:20,750 --> 00:17:22,880
 is two American pizzas and you can feed 
two pizzas I should say of course this 

427
00:17:22,880 --> 00:17:24,588
a hell of a lot of people with two 
 is two American pizzas and you can feed 

428
00:17:24,588 --> 00:17:28,250
American pizzas but I think the notion
a hell of a lot of people with two 

429
00:17:28,250 --> 00:17:30,829
is still there but within 
American pizzas but I think the notion

430
00:17:30,829 --> 00:17:34,750
there's still a lot of variability so 
is still there but within 

431
00:17:34,750 --> 00:17:37,129
 that's the best I can do when it comes 
there's still a lot of variability so 

432
00:17:37,129 --> 00:17:37,130
 that's the best I can do when it comes 

433
00:17:37,130 --> 00:17:39,679
to defining microservices for you it's 
 that's the best I can do when it comes 

434
00:17:39,679 --> 00:17:42,440
still I'm afraid pretty fuzzy but you 
to defining microservices for you it's 

435
00:17:42,440 --> 00:17:44,240
know that's the way things go I think 
still I'm afraid pretty fuzzy but you 

436
00:17:44,240 --> 00:17:46,669
 however it is it does carve out a 
know that's the way things go I think 

437
00:17:46,669 --> 00:17:49,369
reasonable class of systems the next 
 however it is it does carve out a 

438
00:17:49,369 --> 00:17:49,370
question of course is when you should 
reasonable class of systems the next 
 however it is it does carve out a 

439
00:17:49,370 --> 00:17:51,169
reasonable class of systems the next 
question of course is when you should 

440
00:17:51,169 --> 00:17:52,989
 use it what are the advantages of 
question of course is when you should 

441
00:17:52,989 --> 00:17:52,990
 use it what are the advantages of 

442
00:17:52,990 --> 00:17:59,869
 micro-services compared to monoliths now 
 use it what are the advantages of 

443
00:17:59,869 --> 00:17:59,870
one big advantage of a monolith is it a 
 micro-services compared to monoliths now 
 use it what are the advantages of 

444
00:17:59,870 --> 00:18:02,089
 micro-services compared to monoliths now 
one big advantage of a monolith is it a 

445
00:18:02,089 --> 00:18:05,119
relatively simple and familiar approach 
one big advantage of a monolith is it a 

446
00:18:05,119 --> 00:18:08,209
to use and this is not to be 
relatively simple and familiar approach 

447
00:18:08,209 --> 00:18:08,210
to use and this is not to be 

448
00:18:08,210 --> 00:18:10,009
underestimated I mean I've already 
to use and this is not to be 

449
00:18:10,009 --> 00:18:12,200
 started hearing and trickling in stories 
underestimated I mean I've already 

450
00:18:12,200 --> 00:18:14,509
of projects that you know decide you 
 started hearing and trickling in stories 

451
00:18:14,509 --> 00:18:16,038
know we want to use this micro-service 
of projects that you know decide you 

452
00:18:16,038 --> 00:18:18,288
stuff because it's so cool we want to do
know we want to use this micro-service 

453
00:18:18,288 --> 00:18:20,000
it and they ended up getting themselves
stuff because it's so cool we want to do

454
00:18:20,000 --> 00:18:21,679
into trouble where they really should 
it and they ended up getting themselves

455
00:18:21,679 --> 00:18:24,079
have built a simple model if instead now 
into trouble where they really should 

456
00:18:24,079 --> 00:18:25,460
if you look at an application and you 
have built a simple model if instead now 

457
00:18:25,460 --> 00:18:27,288
say yeah that would work really nicely 
if you look at an application and you 

458
00:18:27,288 --> 00:18:29,839
as a simple rails app you don't want to 
say yeah that would work really nicely 

459
00:18:29,839 --> 00:18:29,840
build start building it as a micro
as a simple rails app you don't want to 
say yeah that would work really nicely 

460
00:18:29,840 --> 00:18:31,369
as a simple rails app you don't want to 
build start building it as a micro

461
00:18:31,369 --> 00:18:33,199
service because micro services
build start building it as a micro

462
00:18:33,199 --> 00:18:33,200
service because micro services

463
00:18:33,200 --> 00:18:35,509
 introduced distributed computing they 
service because micro services

464
00:18:35,509 --> 00:18:36,859
often introduced asynchronous 
 introduced distributed computing they 

465
00:18:36,859 --> 00:18:36,860
communication and those are significant 
often introduced asynchronous 
 introduced distributed computing they 

466
00:18:36,860 --> 00:18:39,200
often introduced asynchronous 
communication and those are significant 

467
00:18:39,200 --> 00:18:42,528
complexity boosters so the monolith 
communication and those are significant 

468
00:18:42,528 --> 00:18:44,389
still has the advantage of up to a 
complexity boosters so the monolith 

469
00:18:44,388 --> 00:18:48,558
certain size at least simplicity one of 
still has the advantage of up to a 

470
00:18:48,558 --> 00:18:50,329
the great advantages of micro services 
certain size at least simplicity one of 

471
00:18:50,329 --> 00:18:53,750
 is the ability to deploy the various 
the great advantages of micro services 

472
00:18:53,750 --> 00:18:56,119
pieces independently if you want to 
 is the ability to deploy the various 

473
00:18:56,119 --> 00:18:58,308
 upgrade a monolith you've got to upgrade 
pieces independently if you want to 

474
00:18:58,308 --> 00:19:00,949
 the whole thing I heard the story of an 
 upgrade a monolith you've got to upgrade 

475
00:19:00,949 --> 00:19:00,950
 the whole thing I heard the story of an 

476
00:19:00,950 --> 00:19:02,750
insurance company where they've got one 
 the whole thing I heard the story of an 

477
00:19:02,750 --> 00:19:04,548
monolith that handled all their 
insurance company where they've got one 

478
00:19:04,548 --> 00:19:06,589
different lines of insurance if they 
monolith that handled all their 

479
00:19:06,589 --> 00:19:08,778
wanted to in to upgrade their auto 
different lines of insurance if they 

480
00:19:08,778 --> 00:19:11,240
insurance they had to upgrade the home 
wanted to in to upgrade their auto 

481
00:19:11,240 --> 00:19:12,950
insurance as well they couldn't do them 
insurance they had to upgrade the home 

482
00:19:12,950 --> 00:19:15,230
 independently and that's a disadvantage 
insurance as well they couldn't do them 

483
00:19:15,230 --> 00:19:17,720
 of a monolith you're forced to upgrade 
 independently and that's a disadvantage 

484
00:19:17,720 --> 00:19:20,480
all at once now if you're really good at 
 of a monolith you're forced to upgrade 

485
00:19:20,480 --> 00:19:22,308
 your continuous delivery pipelines I 
all at once now if you're really good at 

486
00:19:22,308 --> 00:19:24,679
think you can make that work but you but 
 your continuous delivery pipelines I 

487
00:19:24,679 --> 00:19:26,869
it's much harder than trying to upgrade 
think you can make that work but you but 

488
00:19:26,869 --> 00:19:29,538
 and the separate pieces and that was in 
it's much harder than trying to upgrade 

489
00:19:29,538 --> 00:19:31,548
fact one of the crucial reasons why 
 and the separate pieces and that was in 

490
00:19:31,548 --> 00:19:33,109
Netflix went down this route they had
fact one of the crucial reasons why 

491
00:19:33,109 --> 00:19:35,720
difficulties getting their systems being 
Netflix went down this route they had

492
00:19:35,720 --> 00:19:37,428
able to deploy as rapidly as they need 
difficulties getting their systems being 

493
00:19:37,429 --> 00:19:39,649
 to do so they found that switching to a 
able to deploy as rapidly as they need 

494
00:19:39,648 --> 00:19:41,179
micro service approach gave them more
 to do so they found that switching to a 

495
00:19:41,179 --> 00:19:43,428
flexibility and this is of course very 
micro service approach gave them more

496
00:19:43,429 --> 00:19:44,390
important in
flexibility and this is of course very 

497
00:19:44,390 --> 00:19:46,640
in an age where we need to be able to 
important in

498
00:19:46,640 --> 00:19:48,619
deploy new applications not once every 
in an age where we need to be able to 

499
00:19:48,619 --> 00:19:48,620
 few months but every week every day and 
deploy new applications not once every 
in an age where we need to be able to 

500
00:19:48,620 --> 00:19:51,890
deploy new applications not once every 
 few months but every week every day and 

501
00:19:51,890 --> 00:19:55,789
often many times a day and then we are 
 few months but every week every day and 

502
00:19:55,789 --> 00:19:57,380
granted your micro services that can
often many times a day and then we are 

503
00:19:57,380 --> 00:19:58,279
give you a greater degree of
granted your micro services that can

504
00:19:58,279 --> 00:20:01,220
 availability if your recommendation 
give you a greater degree of

505
00:20:01,220 --> 00:20:03,589
service goes down for some reason you 
 availability if your recommendation 

506
00:20:03,589 --> 00:20:05,509
can still run your shopping cart and 
service goes down for some reason you 

507
00:20:05,509 --> 00:20:07,819
this is important because what is the 
can still run your shopping cart and 

508
00:20:07,819 --> 00:20:09,670
most important thing to Americans 
this is important because what is the 

509
00:20:09,670 --> 00:20:13,759
shopping right so nothing must stop the 
most important thing to Americans 

510
00:20:13,759 --> 00:20:17,900
shopping now that availability of course 
shopping right so nothing must stop the 

511
00:20:17,900 --> 00:20:19,549
comes from being handled be able to 
shopping now that availability of course 

512
00:20:19,549 --> 00:20:22,579
handle failure effectively but if you've
comes from being handled be able to 

513
00:20:22,579 --> 00:20:22,580
got availability what does that mean you 
handle failure effectively but if you've
comes from being handled be able to 

514
00:20:22,580 --> 00:20:24,799
handle failure effectively but if you've
got availability what does that mean you 

515
00:20:24,799 --> 00:20:29,059
lose consistency it's much harder to 
got availability what does that mean you 

516
00:20:29,059 --> 00:20:31,549
 maintain consistency with micro service 
lose consistency it's much harder to 

517
00:20:31,549 --> 00:20:34,099
applications so you embrace eventual
 maintain consistency with micro service 

518
00:20:34,099 --> 00:20:37,099
consistency which may or may not be a 
applications so you embrace eventual

519
00:20:37,099 --> 00:20:38,869
good thing depending on what where you 
consistency which may or may not be a 

520
00:20:38,869 --> 00:20:41,719
 are and it's particularly difficult of 
good thing depending on what where you 

521
00:20:41,719 --> 00:20:41,720
 are and it's particularly difficult of 

522
00:20:41,720 --> 00:20:43,129
course to get the right kind of 
 are and it's particularly difficult of 

523
00:20:43,129 --> 00:20:43,130
course to get the right kind of 

524
00:20:43,130 --> 00:20:44,960
consistent behavior so that I can 
course to get the right kind of 

525
00:20:44,960 --> 00:20:48,619
 actually post an update when interacting 
consistent behavior so that I can 

526
00:20:48,619 --> 00:20:48,620
with a web app and actually make sure 
 actually post an update when interacting 
consistent behavior so that I can 

527
00:20:48,620 --> 00:20:50,089
 actually post an update when interacting 
with a web app and actually make sure 

528
00:20:50,089 --> 00:20:50,090
 that I see it and not go where did that 
 actually post an update when interacting 
with a web app and actually make sure 

529
00:20:50,090 --> 00:20:52,549
with a web app and actually make sure 
 that I see it and not go where did that 

530
00:20:52,549 --> 00:20:55,009
go did it get lost which is the kind of 
 that I see it and not go where did that 

531
00:20:55,009 --> 00:20:56,240
thing that goes wrong when you don't do 
go did it get lost which is the kind of 

532
00:20:56,240 --> 00:20:59,599
consistency well another big issue we've 
thing that goes wrong when you don't do 

533
00:20:59,599 --> 00:21:02,720
 modeled with the monolith is that it 
consistency well another big issue we've 

534
00:21:02,720 --> 00:21:04,750
makes it relatively easy to refactor
 modeled with the monolith is that it 

535
00:21:04,750 --> 00:21:07,759
 particularly between modules now with 
makes it relatively easy to refactor

536
00:21:07,759 --> 00:21:09,680
any kind of software design you want 
 particularly between modules now with 

537
00:21:09,680 --> 00:21:12,079
good modularity you want to divide your 
any kind of software design you want 

538
00:21:12,079 --> 00:21:14,630
software up into pieces so that in order 
good modularity you want to divide your 

539
00:21:14,630 --> 00:21:16,099
 to make a change I don't have to 
software up into pieces so that in order 

540
00:21:16,099 --> 00:21:18,140
understand the whole system I can just 
 to make a change I don't have to 

541
00:21:18,140 --> 00:21:20,629
understand one or two modules but that 
understand the whole system I can just 

542
00:21:20,629 --> 00:21:20,630
understand one or two modules but that 

543
00:21:20,630 --> 00:21:22,160
means you've got to get your module 
understand one or two modules but that 

544
00:21:22,160 --> 00:21:24,410
boundaries right and if you don't get 
means you've got to get your module 

545
00:21:24,410 --> 00:21:25,849
 your module boundaries right you've got 
boundaries right and if you don't get 

546
00:21:25,849 --> 00:21:25,850
to be able to change them now if you've 
 your module boundaries right you've got 
boundaries right and if you don't get 

547
00:21:25,850 --> 00:21:28,009
 your module boundaries right you've got 
to be able to change them now if you've 

548
00:21:28,009 --> 00:21:29,869
got a model if that kind of thing isn't 
to be able to change them now if you've 

549
00:21:29,869 --> 00:21:31,700
 too bad you can say oh I need to move 
got a model if that kind of thing isn't 

550
00:21:31,700 --> 00:21:33,439
this object from over here in that 
 too bad you can say oh I need to move 

551
00:21:33,439 --> 00:21:33,440
this object from over here in that 

552
00:21:33,440 --> 00:21:35,660
 module over there it's not a hard 
this object from over here in that 

553
00:21:35,660 --> 00:21:38,569
refactoring to do in a microservices 
 module over there it's not a hard 

554
00:21:38,569 --> 00:21:38,570
world that becomes a hell of a lot 
refactoring to do in a microservices 
 module over there it's not a hard 

555
00:21:38,570 --> 00:21:40,309
refactoring to do in a microservices 
world that becomes a hell of a lot 

556
00:21:40,309 --> 00:21:40,310
harder because now you're talking about 
refactoring to do in a microservices 
world that becomes a hell of a lot 

557
00:21:40,310 --> 00:21:42,319
world that becomes a hell of a lot 
harder because now you're talking about 

558
00:21:42,319 --> 00:21:46,279
these remote calls so that's also I 
harder because now you're talking about 

559
00:21:46,279 --> 00:21:47,720
 think one of the problems with running 
these remote calls so that's also I 

560
00:21:47,720 --> 00:21:49,879
 to monitor micro services too quickly if 
 think one of the problems with running 

561
00:21:49,879 --> 00:21:49,880
 to monitor micro services too quickly if 

562
00:21:49,880 --> 00:21:51,500
you don't understand the module 
 to monitor micro services too quickly if 

563
00:21:51,500 --> 00:21:53,869
boundaries well you've very easy to get
you don't understand the module 

564
00:21:53,869 --> 00:21:53,870
 a lock yourself into a pure design and 
boundaries well you've very easy to get
you don't understand the module 

565
00:21:53,870 --> 00:21:56,150
boundaries well you've very easy to get
 a lock yourself into a pure design and 

566
00:21:56,150 --> 00:21:57,529
 anumana lift can be a good way of 
 a lock yourself into a pure design and 

567
00:21:57,529 --> 00:21:58,349
figuring out 
 anumana lift can be a good way of 

568
00:21:58,349 --> 00:21:58,350
module boundaries are before you
figuring out 
 anumana lift can be a good way of 

569
00:21:58,350 --> 00:22:00,329
figuring out 
module boundaries are before you

570
00:22:00,329 --> 00:22:04,230
actually do the split and we said that 
module boundaries are before you

571
00:22:04,230 --> 00:22:05,278
one of the interesting things about 
actually do the split and we said that 

572
00:22:05,278 --> 00:22:07,200
 microservices is that they actually help 
one of the interesting things about 

573
00:22:07,200 --> 00:22:09,990
you preserve modularity a lot of people 
 microservices is that they actually help 

574
00:22:09,990 --> 00:22:12,000
you know like me waffle on endlessly 
you preserve modularity a lot of people 

575
00:22:12,000 --> 00:22:13,349
about how important it is to have good 
you know like me waffle on endlessly 

576
00:22:13,349 --> 00:22:16,319
 modules now follow bob Martin's rules 
about how important it is to have good 

577
00:22:16,319 --> 00:22:18,538
about clean dependencies and all the 
 modules now follow bob Martin's rules 

578
00:22:18,538 --> 00:22:20,668
rest of it but the reality is most 
about clean dependencies and all the 

579
00:22:20,669 --> 00:22:22,288
systems find it hard to do it in 
rest of it but the reality is most 

580
00:22:22,288 --> 00:22:24,450
 practice it's too easy to kind of do 
systems find it hard to do it in 

581
00:22:24,450 --> 00:22:26,908
 little end runs around and expose little 
 practice it's too easy to kind of do 

582
00:22:26,909 --> 00:22:28,470
things and not keep your module 
 little end runs around and expose little 

583
00:22:28,470 --> 00:22:31,829
boundaries solid on the other hand in a 
things and not keep your module 

584
00:22:31,829 --> 00:22:31,830
micro service world your communications 
boundaries solid on the other hand in a 
things and not keep your module 

585
00:22:31,830 --> 00:22:34,379
boundaries solid on the other hand in a 
micro service world your communications 

586
00:22:34,378 --> 00:22:35,730
are purely through your network 
micro service world your communications 

587
00:22:35,730 --> 00:22:38,579
interfaces and it's maintained it makes 
are purely through your network 

588
00:22:38,579 --> 00:22:42,058
it really easy to ensure you don't share 
interfaces and it's maintained it makes 

589
00:22:42,058 --> 00:22:44,250
mutable state which is of course one of 
it really easy to ensure you don't share 

590
00:22:44,250 --> 00:22:46,558
the best ways to get yourself into a 
mutable state which is of course one of 

591
00:22:46,558 --> 00:22:48,690
confusion in a monolith module 
the best ways to get yourself into a 

592
00:22:48,690 --> 00:22:51,450
architecture so in many ways micro 
confusion in a monolith module 

593
00:22:51,450 --> 00:22:53,069
service is kind of a discipline that 
architecture so in many ways micro 

594
00:22:53,069 --> 00:22:53,070
forces you to keep your modularity 
service is kind of a discipline that 
architecture so in many ways micro 

595
00:22:53,070 --> 00:22:55,079
service is kind of a discipline that 
forces you to keep your modularity 

596
00:22:55,079 --> 00:22:55,080
together and then I mean the last big 
service is kind of a discipline that 
forces you to keep your modularity 

597
00:22:55,080 --> 00:23:00,538
forces you to keep your modularity 
together and then I mean the last big 

598
00:23:00,538 --> 00:23:02,308
advantage in micro services they allow 
together and then I mean the last big 

599
00:23:02,308 --> 00:23:04,169
you to go with multiple platforms if 
advantage in micro services they allow 

600
00:23:04,169 --> 00:23:07,048
some parts of your application stack are 
you to go with multiple platforms if 

601
00:23:07,048 --> 00:23:08,759
best off with a traditional you know 
some parts of your application stack are 

602
00:23:08,759 --> 00:23:10,918
Java whatever language you can use them 
best off with a traditional you know 

603
00:23:10,919 --> 00:23:13,829
in some places and then you use sort or 
Java whatever language you can use them 

604
00:23:13,829 --> 00:23:16,409
an even experiment with say a closure on 
in some places and then you use sort or 

605
00:23:16,409 --> 00:23:19,019
other areas you've got the flexibility 
an even experiment with say a closure on 

606
00:23:19,019 --> 00:23:20,789
 now of course you don't necessarily want 
other areas you've got the flexibility 

607
00:23:20,788 --> 00:23:22,888
to go so mad that you've got 20 services 
 now of course you don't necessarily want 

608
00:23:22,888 --> 00:23:24,829
written in 30 programming languages but
to go so mad that you've got 20 services 

609
00:23:24,829 --> 00:23:27,719
 on the other hand that flexibility can 
written in 30 programming languages but

610
00:23:27,719 --> 00:23:27,720
 on the other hand that flexibility can 

611
00:23:27,720 --> 00:23:29,939
 be very valuable just as you don't know 
 on the other hand that flexibility can 

612
00:23:29,939 --> 00:23:29,940
 be very valuable just as you don't know 

613
00:23:29,940 --> 00:23:31,710
 use JavaScript that's the one thing I 
 be very valuable just as you don't know 

614
00:23:31,710 --> 00:23:35,000
 really don't want anybody to do 
 use JavaScript that's the one thing I 

615
00:23:38,170 --> 00:23:40,190
 you've got to fight back against that 

616
00:23:40,190 --> 00:23:45,309
 monster somehow so that's the trade-offs 
 you've got to fight back against that 

617
00:23:45,309 --> 00:23:45,310
 microservices are not straightforward 
 monster somehow so that's the trade-offs 
 you've got to fight back against that 

618
00:23:45,310 --> 00:23:47,420
 monster somehow so that's the trade-offs 
 microservices are not straightforward 

619
00:23:47,420 --> 00:23:49,879
 route to go in many ways I'd say if 
 microservices are not straightforward 

620
00:23:49,879 --> 00:23:49,880
 route to go in many ways I'd say if 

621
00:23:49,880 --> 00:23:51,319
you're not sure if you've got a 
 route to go in many ways I'd say if 

622
00:23:51,319 --> 00:23:51,320
relatively small system don't worry 
you're not sure if you've got a 
 route to go in many ways I'd say if 

623
00:23:51,320 --> 00:23:53,089
you're not sure if you've got a 
relatively small system don't worry 

624
00:23:53,089 --> 00:23:53,090
about it but on the other hand they can 
you're not sure if you've got a 
relatively small system don't worry 

625
00:23:53,090 --> 00:23:56,119
relatively small system don't worry 
about it but on the other hand they can 

626
00:23:56,119 --> 00:23:57,379
 be an appropriate appropriate 
about it but on the other hand they can 

627
00:23:57,379 --> 00:23:57,380
 be an appropriate appropriate 

628
00:23:57,380 --> 00:23:59,000
 architecture in a lot of places and 
 be an appropriate appropriate 

629
00:23:59,000 --> 00:24:00,769
we're still trying to understand what 
 architecture in a lot of places and 

630
00:24:00,769 --> 00:24:00,770
the boundaries are between them it's 
we're still trying to understand what 
 architecture in a lot of places and 

631
00:24:00,770 --> 00:24:02,329
we're still trying to understand what 
the boundaries are between them it's 

632
00:24:02,329 --> 00:24:05,269
still fairly early and then the last 
the boundaries are between them it's 

633
00:24:05,269 --> 00:24:07,460
 point I want to say is if you're going 
still fairly early and then the last 

634
00:24:07,460 --> 00:24:09,589
to go down the micro-service point there 
 point I want to say is if you're going 

635
00:24:09,589 --> 00:24:11,150
 are certain things you've got to make 
to go down the micro-service point there 

636
00:24:11,150 --> 00:24:12,980
sure that you get sorted out otherwise 
 are certain things you've got to make 

637
00:24:12,980 --> 00:24:13,880
you're going to get into a lot of 
sure that you get sorted out otherwise 

638
00:24:13,880 --> 00:24:16,609
 trouble you've got to make sure that you 
you're going to get into a lot of 

639
00:24:16,609 --> 00:24:16,610
can provision new machines rapidly if 
 trouble you've got to make sure that you 
you're going to get into a lot of 

640
00:24:16,610 --> 00:24:18,920
 trouble you've got to make sure that you 
can provision new machines rapidly if 

641
00:24:18,920 --> 00:24:21,319
you're in a situation where it takes you 
can provision new machines rapidly if 

642
00:24:21,319 --> 00:24:23,960
a month to get a new server set up and 
you're in a situation where it takes you 

643
00:24:23,960 --> 00:24:25,579
provisioned and ready for use you're 
a month to get a new server set up and 

644
00:24:25,579 --> 00:24:26,869
 going to have a lot of problems in the 
provisioned and ready for use you're 

645
00:24:26,869 --> 00:24:26,870
micro service world this is of course 
 going to have a lot of problems in the 
provisioned and ready for use you're 

646
00:24:26,870 --> 00:24:28,639
 going to have a lot of problems in the 
micro service world this is of course 

647
00:24:28,639 --> 00:24:28,640
micro service world this is of course 

648
00:24:28,640 --> 00:24:30,409
 why micro services go very nicely with 
micro service world this is of course 

649
00:24:30,409 --> 00:24:30,410
 why micro services go very nicely with 

650
00:24:30,410 --> 00:24:32,750
cloud if you can provision a new machine 
 why micro services go very nicely with 

651
00:24:32,750 --> 00:24:34,819
in the cloud very quickly which is for 
cloud if you can provision a new machine 

652
00:24:34,819 --> 00:24:34,820
 instance what Netflix do then that 
in the cloud very quickly which is for 
cloud if you can provision a new machine 

653
00:24:34,820 --> 00:24:36,410
in the cloud very quickly which is for 
 instance what Netflix do then that 

654
00:24:36,410 --> 00:24:40,359
 allows you a lot of flexibility there 
 instance what Netflix do then that 

655
00:24:40,359 --> 00:24:43,099
make sure you have at least the basics 
 allows you a lot of flexibility there 

656
00:24:43,099 --> 00:24:43,100
of monitoring you want to know when any 
make sure you have at least the basics 
 allows you a lot of flexibility there 

657
00:24:43,100 --> 00:24:45,679
make sure you have at least the basics 
of monitoring you want to know when any 

658
00:24:45,679 --> 00:24:45,680
of monitoring you want to know when any 

659
00:24:45,680 --> 00:24:47,959
of your services go down you want to 
of monitoring you want to know when any 

660
00:24:47,959 --> 00:24:47,960
of your services go down you want to 

661
00:24:47,960 --> 00:24:49,880
know if something becomes unresponsive 
of your services go down you want to 

662
00:24:49,880 --> 00:24:52,819
 or if important interactions or 
know if something becomes unresponsive 

663
00:24:52,819 --> 00:24:54,259
transactions are getting dropped on the
 or if important interactions or 

664
00:24:54,259 --> 00:24:54,260
floor you've got to have at least a 
transactions are getting dropped on the
 or if important interactions or 

665
00:24:54,260 --> 00:24:56,029
transactions are getting dropped on the
floor you've got to have at least a 

666
00:24:56,029 --> 00:24:57,980
 basic level of monitoring in place 
floor you've got to have at least a 

667
00:24:57,980 --> 00:25:00,349
and also you've got to make sure that 
 basic level of monitoring in place 

668
00:25:00,349 --> 00:25:02,900
your services can be automatically and 
and also you've got to make sure that 

669
00:25:02,900 --> 00:25:05,869
 rapidly deployed um you don't want to be 
your services can be automatically and 

670
00:25:05,869 --> 00:25:07,670
spending two days deploying the service 
 rapidly deployed um you don't want to be 

671
00:25:07,670 --> 00:25:09,709
it's got to be there in hours at the
spending two days deploying the service 

672
00:25:09,709 --> 00:25:09,710
it's got to be there in hours at the

673
00:25:09,710 --> 00:25:12,619
very least and preferably minutes and it 
it's got to be there in hours at the

674
00:25:12,619 --> 00:25:12,620
 should be as much as possible automatic 
very least and preferably minutes and it 
it's got to be there in hours at the

675
00:25:12,620 --> 00:25:14,450
very least and preferably minutes and it 
 should be as much as possible automatic 

676
00:25:14,450 --> 00:25:17,479
process that's just the basics that's 
 should be as much as possible automatic 

677
00:25:17,479 --> 00:25:17,480
process that's just the basics that's 

678
00:25:17,480 --> 00:25:19,160
 just for running with just a couple of 
process that's just the basics that's 

679
00:25:19,160 --> 00:25:21,259
certain amount of services and to do 
 just for running with just a couple of 

680
00:25:21,259 --> 00:25:23,299
more you've got to add more there's a 
certain amount of services and to do 

681
00:25:23,299 --> 00:25:23,300
whole bunch of other stuff that you've 
more you've got to add more there's a 
certain amount of services and to do 

682
00:25:23,300 --> 00:25:24,769
more you've got to add more there's a 
whole bunch of other stuff that you've 

683
00:25:24,769 --> 00:25:26,869
got to get into play as well so make 
whole bunch of other stuff that you've 

684
00:25:26,869 --> 00:25:29,779
sure you've at least got those basics on 
got to get into play as well so make 

685
00:25:29,779 --> 00:25:30,589
 the one I missed 
sure you've at least got those basics on 

686
00:25:30,589 --> 00:25:32,960
 DevOps culture that is you've got to 
 the one I missed 

687
00:25:32,960 --> 00:25:34,759
break down the barriers between the 
 DevOps culture that is you've got to 

688
00:25:34,759 --> 00:25:36,230
 operations group in the applications 
break down the barriers between the 

689
00:25:36,230 --> 00:25:37,900
group so that they're working together 
 operations group in the applications 

690
00:25:37,900 --> 00:25:40,730
 if you've got a difficult communications 
group so that they're working together 

691
00:25:40,730 --> 00:25:42,500
between the two again you're not going 
 if you've got a difficult communications 

692
00:25:42,500 --> 00:25:44,210
 to be able to manage the quantity of 
between the two again you're not going 

693
00:25:44,210 --> 00:25:46,880
 services that you've got to deal with so 
 to be able to manage the quantity of 

694
00:25:46,880 --> 00:25:48,829
as I said those I think are the minimum 
 services that you've got to deal with so 

695
00:25:48,829 --> 00:25:50,869
things to have when you first go 
as I said those I think are the minimum 

696
00:25:50,869 --> 00:25:50,870
 five you don't necessarily have to have 
things to have when you first go 
as I said those I think are the minimum 

697
00:25:50,870 --> 00:25:52,579
things to have when you first go 
 five you don't necessarily have to have 

698
00:25:52,579 --> 00:25:54,709
 them when you start building but you 
 five you don't necessarily have to have 

699
00:25:54,709 --> 00:25:54,710
 them when you start building but you 

700
00:25:54,710 --> 00:25:56,359
definitely have to have them when you go 
 them when you start building but you 

701
00:25:56,359 --> 00:25:58,420
live with this thing
definitely have to have them when you go 

702
00:25:58,420 --> 00:26:02,000
so that's microservices a very brief 
live with this thing

703
00:26:02,000 --> 00:26:04,519
introduction I've written various things
so that's microservices a very brief 

704
00:26:04,519 --> 00:26:06,019
on it there's tons of stuff out there on 
introduction I've written various things

705
00:26:06,019 --> 00:26:08,900
the web you can go and find out more and 
on it there's tons of stuff out there on 

706
00:26:08,900 --> 00:26:12,400
that's the end of my first talk 
the web you can go and find out more and 

707
00:26:17,369 --> 00:26:19,429
you

